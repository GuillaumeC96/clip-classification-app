"""
Page de pr√©diction pour la version cloud avec Azure ML
"""

import os
import pandas as pd
import streamlit as st
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from azure_client import get_azure_client

# Importer le module d'accessibilit√©
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from accessibility import init_accessibility_state, render_accessibility_sidebar, apply_accessibility_styles

# Initialiser l'√©tat d'accessibilit√©
init_accessibility_state()

st.title("üîÆ Pr√©diction de Cat√©gorie")

# Client Azure ML
azure_client = get_azure_client()

# Afficher les options d'accessibilit√© dans la sidebar
render_accessibility_sidebar()

# Appliquer les styles d'accessibilit√©
apply_accessibility_styles()

st.markdown("---")

# Interface de pr√©diction
col1, col2 = st.columns([1, 1])

with col1:
    st.subheader("üì§ Upload de l'image")
    uploaded_file = st.file_uploader(
        "Choisissez une image de produit",
        type=['png', 'jpg', 'jpeg'],
        help="Formats support√©s : PNG, JPG, JPEG"
    )
    
    if uploaded_file is not None:
        # Afficher l'image
        image = Image.open(uploaded_file)
        st.image(image, caption="Image upload√©e", use_column_width=True)
        
        # Informations sur l'image
        st.info(f"üìè Dimensions : {image.size[0]} x {image.size[1]} pixels")

with col2:
    st.subheader("üìù Informations du produit")
    
    product_name = st.text_input(
        "Nom du produit",
        placeholder="Ex: iPhone 14 Pro"
    )
    
    description = st.text_area(
        "Description du produit",
        placeholder="Ex: Smartphone haut de gamme avec cam√©ra professionnelle"
    )
    
    specifications = st.text_area(
        "Sp√©cifications techniques",
        placeholder="Ex: 6.1 pouces, 128GB, iOS 16"
    )
    
    # Bouton de pr√©diction
    if st.button("üîÆ Pr√©dire la cat√©gorie", type="primary"):
        if uploaded_file is not None:
            with st.spinner("üîÑ Analyse en cours..."):
                # Pr√©diction avec Azure ML
                result = azure_client.predict(image, product_name, description, specifications)
                
                # Affichage des r√©sultats
                if 'predicted_category' in result:
                    st.success("‚úÖ Pr√©diction termin√©e !")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.metric(
                            "Cat√©gorie pr√©dite",
                            result['predicted_category']
                        )
                    
                    with col2:
                        confidence = result.get('confidence', 0.0)
                        st.metric(
                            "Confiance",
                            f"{confidence:.2%}"
                        )
                    
                    # Scores d√©taill√©s si disponibles
                    if 'category_scores' in result:
                        st.subheader("üìä Scores par cat√©gorie")
                        scores_df = pd.DataFrame(
                            list(result['category_scores'].items()),
                            columns=['Cat√©gorie', 'Score']
                        ).sort_values('Score', ascending=False)
                        
                        st.bar_chart(scores_df.set_index('Cat√©gorie'))
                        st.dataframe(scores_df)
                    
                    # G√©n√©ration de la heatmap d'attention ONNX
                    st.subheader("üî• Heatmap d'Attention ONNX")
                    attention_result = azure_client.generate_attention_heatmap(image, product_name, description, specifications)
                    
                    if attention_result and 'heatmap' in attention_result:
                        st.success("‚úÖ Heatmap d'attention g√©n√©r√©e avec succ√®s !")
                        
                        # Afficher la heatmap
                        heatmap_data = attention_result['heatmap']
                        fig, ax = plt.subplots(figsize=(10, 8))
                        im = ax.imshow(heatmap_data, cmap='inferno', alpha=0.7)
                        ax.set_title("Heatmap d'Attention CLIP ONNX")
                        ax.axis('off')
                        plt.colorbar(im, ax=ax, fraction=0.046, pad=0.04)
                        st.pyplot(fig)
                        
                        # Informations sur les mots-cl√©s
                        if 'keywords' in attention_result:
                            st.write("**Mots-cl√©s analys√©s :**")
                            keywords = attention_result['keywords']
                            for i, keyword in enumerate(keywords[:5], 1):
                                st.write(f"{i}. {keyword}")
                    else:
                        st.warning("‚ö†Ô∏è Impossible de g√©n√©rer la heatmap d'attention")
                        
                else:
                    st.error(f"‚ùå Erreur lors de la pr√©diction: {result.get('error', 'Erreur inconnue')}")
                    
                    # Messages d'aide sp√©cifiques selon le type d'erreur
                    error_msg = result.get('error', '').lower()
                    if 'timeout' in error_msg:
                        st.warning("‚è±Ô∏è **Probl√®me de timeout d√©tect√©**")
                        st.info("üí° **Solutions possibles :**")
                        st.info("‚Ä¢ L'endpoint Azure ML n'est pas disponible ou ne r√©pond pas")
                        st.info("‚Ä¢ Le service est surcharg√© ou en maintenance")
                        st.info("‚Ä¢ V√©rifiez la configuration de l'endpoint")
                    elif '503' in error_msg or 'application error' in error_msg:
                        st.warning("üö´ **Service Azure ML indisponible (503)**")
                        st.info("üí° **Solutions possibles :**")
                        st.info("‚Ä¢ Le service Azure ML est en maintenance ou surcharg√©")
                        st.info("‚Ä¢ L'application Azure a des probl√®mes de ressources")
                        st.info("‚Ä¢ Contactez l'administrateur du service Azure ML")
                    else:
                        st.info("üí° V√©rifiez la configuration de l'API Azure ML.")
        else:
            st.error("‚ùå Veuillez uploader une image avant de faire une pr√©diction")

# Informations sur le mod√®le
st.markdown("---")
st.success("üöÄ Configuration Azure ML ONNX activ√©e")
st.info("‚úÖ Mod√®les ONNX optimis√©s pour des performances maximales")
st.info("""
‚ÑπÔ∏è **Note** : Cette application utilise des mod√®les CLIP ONNX d√©ploy√©s sur Azure ML.
Les pr√©dictions sont effectu√©es via l'inf√©rence ONNX optimis√©e pour des performances maximales.
""")
