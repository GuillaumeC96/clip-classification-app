"""
Page de pr√©diction pour la version cloud avec Azure ML
"""

import os
import pandas as pd
import streamlit as st
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
import json
from azure_client import get_azure_client

# Importer le module d'accessibilit√©
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from accessibility import init_accessibility_state, render_accessibility_sidebar, apply_accessibility_styles

# Initialiser l'√©tat d'accessibilit√©
init_accessibility_state()

st.title("üîÆ Pr√©diction de Cat√©gorie")

# Client Azure ML
azure_client = get_azure_client()

# Afficher les options d'accessibilit√© dans la sidebar
render_accessibility_sidebar()

# Appliquer les styles d'accessibilit√©
apply_accessibility_styles()

st.markdown("---")

# Fonction pour charger le produit de test par d√©faut
@st.cache_data
def load_default_test_product():
    """Charger le produit de test par d√©faut"""
    try:
        # Charger les donn√©es des produits
        df = pd.read_csv('produits_original.csv')
        
        # Produit de test par d√©faut (montre)
        test_product_id = '1120bc768623572513df956172ffefeb'
        product = df[df['uniq_id'] == test_product_id]
        
        if not product.empty:
            product = product.iloc[0]
            image_filename = f"{test_product_id}.jpg"
            image_path = f"Images/{image_filename}"
            
            # V√©rifier si l'image existe
            if os.path.exists(image_path):
                # Nettoyer la description (enlever les \n et \t)
                description = product['description'] if pd.notna(product['description']) else product['product_name']
                if description:
                    description = description.replace('\n', ' ').replace('\t', ' ').strip()
                    # Garder seulement les 2 premi√®res phrases pour la lisibilit√©
                    sentences = description.split('. ')
                    if len(sentences) > 2:
                        description = '. '.join(sentences[:2]) + '.'
                
                # Nettoyer les sp√©cifications (parser le format Ruby/JSON)
                specs = product['product_specifications'] if pd.notna(product['product_specifications']) else f"Prix: {product['retail_price']} INR"
                if specs and specs.startswith('{"product_specification"'):
                    try:
                        # Remplacer => par : pour convertir en JSON valide
                        json_specs = specs.replace('=>', ':')
                        specs_data = json.loads(json_specs)
                        if 'product_specification' in specs_data:
                            key_specs = []
                            for spec in specs_data['product_specification'][:5]:  # Limiter √† 5 specs
                                if 'key' in spec and 'value' in spec:
                                    key_specs.append(f"{spec['key']}: {spec['value']}")
                            specs = '; '.join(key_specs) if key_specs else f"Prix: {product['retail_price']} INR"
                    except:
                        specs = f"Prix: {product['retail_price']} INR"
                
                return {
                    'name': product['product_name'],
                    'description': description,
                    'specifications': specs,
                    'image_path': image_path,
                    'image_filename': image_filename
                }
            else:
                st.warning(f"‚ö†Ô∏è Image non trouv√©e: {image_path}")
                return None
        else:
            st.warning("‚ö†Ô∏è Produit de test non trouv√© dans les donn√©es")
            return None
            
    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement du produit de test: {str(e)}")
        return None

# Charger le produit de test par d√©faut
default_product = load_default_test_product()

# Lancer automatiquement la pr√©diction sur le produit de test au premier chargement
if default_product and not st.session_state.get('auto_prediction_done', False):
    st.session_state['auto_prediction_done'] = True
    st.session_state['test_prediction_launched'] = True

# Interface de pr√©diction
col1, col2 = st.columns([1, 1])

with col1:
    st.subheader("üì§ Upload de l'image")
    uploaded_file = st.file_uploader(
        "Choisissez une image de produit",
        type=['png', 'jpg', 'jpeg'],
        help="Formats support√©s : PNG, JPG, JPEG"
    )
    
    if uploaded_file is not None:
        # Afficher l'image
        image = Image.open(uploaded_file)
        st.image(image, caption="Image upload√©e", use_column_width=True)
        
        # Informations sur l'image
        st.info(f"üìè Dimensions : {image.size[0]} x {image.size[1]} pixels")
    elif default_product and st.session_state.get('test_prediction_launched', False):
        # Afficher l'image du produit de test
        image = Image.open(default_product['image_path'])
        st.image(image, caption="Produit de test", use_column_width=True)
        st.info(f"üìè Dimensions : {image.size[0]} x {image.size[1]} pixels")

with col2:
    st.subheader("üìù Informations du produit")
    
    if default_product and st.session_state.get('test_prediction_launched', False):
        # Utiliser les donn√©es du produit de test
        product_name = st.text_input(
            "Nom du produit",
            value=default_product['name'],
            placeholder="Ex: iPhone 14 Pro"
        )
        
        description = st.text_area(
            "Description du produit",
            value=default_product['description'],
            placeholder="Ex: Smartphone haut de gamme avec cam√©ra professionnelle"
        )
        
        specifications = st.text_area(
            "Sp√©cifications techniques",
            value=default_product['specifications'],
            placeholder="Ex: 6.1 pouces, 128GB, iOS 16"
        )
    else:
        # Interface normale
        product_name = st.text_input(
            "Nom du produit",
            placeholder="Ex: iPhone 14 Pro"
        )
        
        description = st.text_area(
            "Description du produit",
            placeholder="Ex: Smartphone haut de gamme avec cam√©ra professionnelle"
        )
        
        specifications = st.text_area(
            "Sp√©cifications techniques",
            placeholder="Ex: 6.1 pouces, 128GB, iOS 16"
        )
    
    # Bouton de pr√©diction
    if st.button("üîÆ Pr√©dire la cat√©gorie", type="primary"):
        # D√©terminer quelle image utiliser
        if uploaded_file is not None:
            image = Image.open(uploaded_file)
        elif default_product and st.session_state.get('test_prediction_launched', False):
            image = Image.open(default_product['image_path'])
        else:
            st.error("‚ùå Veuillez uploader une image avant de faire une pr√©diction")
            st.stop()
        
        with st.spinner("üîÑ Analyse en cours..."):
            # Pr√©diction avec Azure ML
            text_description = f"{product_name} {description} {specifications}"
            result = azure_client.predict_category(image, text_description)
            
            # Affichage des r√©sultats
            if 'predicted_category' in result:
                st.success("‚úÖ Pr√©diction termin√©e !")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.metric(
                        "Cat√©gorie pr√©dite",
                        result['predicted_category']
                    )
                
                with col2:
                    confidence = result.get('confidence', 0.0)
                    st.metric(
                        "Confiance",
                        f"{confidence:.2%}"
                    )
                
                # Scores d√©taill√©s si disponibles
                if 'category_scores' in result:
                    st.subheader("üìä Scores par cat√©gorie")
                    scores_df = pd.DataFrame(
                        list(result['category_scores'].items()),
                        columns=['Cat√©gorie', 'Score']
                    ).sort_values('Score', ascending=False)
                    
                    st.bar_chart(scores_df.set_index('Cat√©gorie'))
                    st.dataframe(scores_df)
                
                # G√©n√©ration de la heatmap d'attention ONNX
                st.subheader("üî• Heatmap d'Attention ONNX")
                attention_result = azure_client.generate_attention_heatmap(image, text_description)
                
                if attention_result and 'heatmap' in attention_result:
                    st.success("‚úÖ Heatmap d'attention g√©n√©r√©e avec succ√®s !")
                    
                    # Afficher la heatmap
                    heatmap_data = attention_result['heatmap']
                    fig, ax = plt.subplots(figsize=(10, 8))
                    im = ax.imshow(heatmap_data, cmap='inferno', alpha=0.7)
                    ax.set_title("Heatmap d'Attention CLIP ONNX")
                    ax.axis('off')
                    plt.colorbar(im, ax=ax, fraction=0.046, pad=0.04)
                    st.pyplot(fig)
                    
                    # Informations sur les mots-cl√©s
                    if 'keywords' in attention_result:
                        st.write("**Mots-cl√©s analys√©s :**")
                        keywords = attention_result['keywords']
                        for i, keyword in enumerate(keywords[:5], 1):
                            st.write(f"{i}. {keyword}")
                else:
                    st.warning("‚ö†Ô∏è Impossible de g√©n√©rer la heatmap d'attention")
                    
            else:
                st.error(f"‚ùå Erreur lors de la pr√©diction: {result.get('error', 'Erreur inconnue')}")
                
                # Messages d'aide sp√©cifiques selon le type d'erreur
                error_msg = result.get('error', '').lower()
                if 'timeout' in error_msg:
                    st.warning("‚è±Ô∏è **Probl√®me de timeout d√©tect√©**")
                    st.info("üí° **Solutions possibles :**")
                    st.info("‚Ä¢ L'endpoint Azure ML n'est pas disponible ou ne r√©pond pas")
                    st.info("‚Ä¢ Le service est surcharg√© ou en maintenance")
                    st.info("‚Ä¢ V√©rifiez la configuration de l'endpoint")
                elif '503' in error_msg or 'application error' in error_msg:
                    st.warning("üö´ **Service Azure ML indisponible (503)**")
                    st.info("üí° **Solutions possibles :**")
                    st.info("‚Ä¢ Le service Azure ML est en maintenance ou surcharg√©")
                    st.info("‚Ä¢ L'application Azure a des probl√®mes de ressources")
                    st.info("‚Ä¢ Contactez l'administrateur du service Azure ML")
                else:
                    st.info("üí° V√©rifiez la configuration de l'API Azure ML.")

# Lancer automatiquement la pr√©diction sur le produit de test
if default_product and st.session_state.get('test_prediction_launched', False):
    st.markdown("---")
    st.info("üéØ **Pr√©diction automatique sur le produit de test**")
    
    # Lancer la pr√©diction automatiquement
    if st.button("üöÄ Lancer la pr√©diction automatique", type="primary"):
        with st.spinner("üîÑ Analyse automatique en cours..."):
            # Charger l'image du produit de test
            image = Image.open(default_product['image_path'])
            
            # Pr√©diction avec Azure ML
            text_description = f"{default_product['name']} {default_product['description']} {default_product['specifications']}"
            result = azure_client.predict_category(image, text_description)
            
            # Affichage des r√©sultats
            if 'predicted_category' in result:
                st.success("‚úÖ Pr√©diction automatique termin√©e !")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.metric(
                        "Cat√©gorie pr√©dite",
                        result['predicted_category']
                    )
                
                with col2:
                    confidence = result.get('confidence', 0.0)
                    st.metric(
                        "Confiance",
                        f"{confidence:.2%}"
                    )
                
                # Scores d√©taill√©s si disponibles
                if 'category_scores' in result:
                    st.subheader("üìä Scores par cat√©gorie")
                    scores_df = pd.DataFrame(
                        list(result['category_scores'].items()),
                        columns=['Cat√©gorie', 'Score']
                    ).sort_values('Score', ascending=False)
                    
                    st.bar_chart(scores_df.set_index('Cat√©gorie'))
                    st.dataframe(scores_df)
                
                # G√©n√©ration de la heatmap d'attention ONNX
                st.subheader("üî• Heatmap d'Attention ONNX")
                attention_result = azure_client.generate_attention_heatmap(image, text_description)
                
                if attention_result and 'heatmap' in attention_result:
                    st.success("‚úÖ Heatmap d'attention g√©n√©r√©e avec succ√®s !")
                    
                    # Afficher la heatmap
                    heatmap_data = attention_result['heatmap']
                    fig, ax = plt.subplots(figsize=(10, 8))
                    im = ax.imshow(heatmap_data, cmap='inferno', alpha=0.7)
                    ax.set_title("Heatmap d'Attention CLIP ONNX")
                    ax.axis('off')
                    plt.colorbar(im, ax=ax, fraction=0.046, pad=0.04)
                    st.pyplot(fig)
                    
                    # Informations sur les mots-cl√©s
                    if 'keywords' in attention_result:
                        st.write("**Mots-cl√©s analys√©s :**")
                        keywords = attention_result['keywords']
                        for i, keyword in enumerate(keywords[:5], 1):
                            st.write(f"{i}. {keyword}")
                else:
                    st.warning("‚ö†Ô∏è Impossible de g√©n√©rer la heatmap d'attention")
                    
            else:
                st.error(f"‚ùå Erreur lors de la pr√©diction automatique: {result.get('error', 'Erreur inconnue')}")

# Informations sur le mod√®le
st.markdown("---")
st.success("üöÄ Configuration Azure ML ONNX activ√©e")
st.info("‚úÖ Mod√®les ONNX optimis√©s pour des performances maximales")
st.info("""
‚ÑπÔ∏è **Note** : Cette application utilise des mod√®les CLIP ONNX d√©ploy√©s sur Azure ML.
Les pr√©dictions sont effectu√©es via l'inf√©rence ONNX optimis√©e pour des performances maximales.
""")
